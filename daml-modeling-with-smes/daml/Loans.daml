module Loans where

import DA.Assert
import DA.Optional

type LoanId = ContractId Loan
type DraftRolloverNoticeId = ContractId DraftRolloverNotice
type RolloverNoticeId = ContractId RolloverNotice
type RolledLoanId = ContractId RolledLoan

template Loan with
    agent : Party
    manager : Party
    amount : Int
    interestRate : Numeric 2
  where
    signatory agent
    observer manager
  
    nonconsuming choice CreateRolloverNotice : Either DraftRolloverNoticeId RolloverNoticeId
      with
        newAmount : Int
        newInterestRate : Optional (Numeric 2)
      controller agent
      do
        if isNone newInterestRate
        then Left <$> create DraftRolloverNotice with loanId = self,..
        else Right <$> create RolloverNotice with
              loanId = self
              newInterestRate = fromSome newInterestRate
              ..


template DraftRolloverNotice with
    agent : Party
    manager : Party
    loanId : LoanId
    newAmount : Int
  where
    signatory agent

    choice FixRate : RolloverNoticeId
      with newInterestRate : Numeric 2
      controller agent
      do
        create RolloverNotice with ..


template RolloverNotice with
    agent : Party
    manager : Party
    loanId : LoanId
    newAmount : Int
    newInterestRate : Numeric 2
  where
    signatory agent
    observer manager
    ensure newInterestRate > 0.0

    choice Approve : LoanId
      controller manager
      do
        priorLoan <- fetch loanId
        assertMsg "New loan amount cannot be less than previous loan amount" (newAmount >= priorLoan.amount)
        archive loanId
        newLoan <- create Loan with
          amount = newAmount
          interestRate = newInterestRate
          ..
        rolledLoan <- create RolledLoan with
          priorAmount = priorLoan.amount
          priorInterestRate = priorLoan.interestRate
          .. 
        pure newLoan


template RolledLoan with
    agent : Party
    manager : Party
    priorAmount : Int
    priorInterestRate : Numeric 2
    newLoan : LoanId
  where
    signatory manager
    observer agent
