module Tests where

import Daml.Script
import Loans

draft_rollover_example : Script ()
draft_rollover_example = script do
  agent <- allocateParty "Agent"
  manager <- allocateParty "Manager"
  let amount = 1000
      interestRate = 0.05
      newAmount = 2000
  loan <- submit agent $ createCmd Loan with ..

  Left rn <- submit agent do
          exerciseCmd loan CreateRolloverNotice with  
            newInterestRate = None, ..

  rnwr <- submit agent do
            exerciseCmd rn FixRate with
              newInterestRate = 0.06,..
  
  loanB <- submit manager do
            exerciseCmd rnwr Approve
  
  pure ()


rollover_example : Script ()
rollover_example = script do
  agent <- allocateParty "Agent"
  manager <- allocateParty "Manager"
  let amount = 1000
      interestRate = 0.05
      newAmount = 2000
  loan <- submit agent $ createCmd Loan with ..

  Right rnwr <- submit agent do
          exerciseCmd loan CreateRolloverNotice with  
            newInterestRate = Some 0.06, ..

  loanB <- submit manager do
            exerciseCmd rnwr Approve
  
  pure ()


new_rate_must_be_positive : Script ()
new_rate_must_be_positive = script do

  -- arrange
  agent <- allocateParty "Agent"
  manager <- allocateParty "Manager"
  let amount = 1000
      interestRate = 0.05
      newAmount = 2000
  loan <- submit agent $ createCmd Loan with ..

  -- act
  submitMustFail agent do
    exerciseCmd loan CreateRolloverNotice with  
      newInterestRate = Some (-0.06), ..

  pure()


new_amount_must_not_decrease : Script ()
new_amount_must_not_decrease = script do

  -- arrange
  agent <- allocateParty "Agent"
  manager <- allocateParty "Manager"
  let amount = 1000
      interestRate = 0.05
      newInterestRate = Some interestRate
  loan <- submit agent $ createCmd Loan with ..

  -- act
  Right rollover <- submit agent do
    exerciseCmd loan CreateRolloverNotice with
      newAmount = amount - 100, ..
  rollover <- submitMustFail manager do
    exerciseCmd rollover Approve

  pure()
