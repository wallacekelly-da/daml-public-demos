module Main where

import Daml.Script
import DA.Foldable (forA_)
import DA.Text (parseDecimal)

import Loans
import LoansV2

getOrAllocateParty : Text -> Script Party
getOrAllocateParty name = script do
  p <- find (\d -> d.displayName == Some name) <$> listKnownParties
  case p of 
    None -> do
      debug $ "Creating party " <> name
      allocatePartyWithHint name (PartyIdHint name)
    Some d -> pure d.party

upgrade: (ContractId Loans.Loan, Loans.Loan) -> Script ()
upgrade (loanId, Loans.Loan{..}) = script do
  let Some amt = parseDecimal amount
      Some rte = parseDecimal rate
  submit lender $ createCmd LoansV2.Loan with 
    amount = amt
    rate = rte
    ..
  submit lender do archiveCmd loanId
  pure ()

setup = script do
  lender <- getOrAllocateParty "Lender"
  loansV1 <- query @Loans.Loan lender
  debug $ "Upgrading " <> show (length loansV1) <> " Loan to V2"
  forA_ loansV1 upgrade