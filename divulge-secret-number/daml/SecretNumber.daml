module SecretNumber where

{-
  This version does not divulge the secret.
  https://discuss.daml.com/t/access-to-data-of-divulged-contracts/5685/5?u=wallacekelly
-}

import Daml.Script

type SecretNumberId = ContractId SecretNumber
type PlayersTurnId = ContractId PlayersTurn
type PlayersGuessId = ContractId PlayersGuess
type GameOverId = ContractId GameOver

template SecretNumber
  with
    owner: Party
    player: Party
    secret : Int
  where
    signatory owner

    nonconsuming choice StartGame : PlayersTurnId
      with allowedGuesses: Int
      controller owner
      do create PlayersTurn with
            secretNumberId = self
            lastGuess = None
            remainingGuesses = allowedGuesses
            msg = "Guess a number"
            ..

    nonconsuming choice GiveHint : Either PlayersTurnId GameOverId
      with playersGuessId: PlayersGuessId
      controller owner
      do
        playersGuess <- fetch playersGuessId
        let msg | playersGuess.guess < secret = "Too low"
                | playersGuess.guess > secret = "Too high"
                | otherwise = "You guessed it!"
        let isGameOver =
              playersGuess.guess == secret
              || playersGuess.remainingGuesses == 0
        if not isGameOver
        then do Left <$> exercise playersGuessId GuessAgain with msg
        else do Right <$> exercise playersGuessId EndGame with msg

template PlayersTurn
  with
    owner: Party
    player: Party
    secretNumberId: SecretNumberId
    lastGuess: Optional Int
    remainingGuesses: Int
    msg: Text
  where
    signatory owner
    observer player

    choice Guess : PlayersGuessId
      with guess: Int
      controller player
      do  
        create PlayersGuess with
          remainingGuesses = remainingGuesses - 1
          ..

template PlayersGuess
  with
    owner: Party
    player: Party
    secretNumberId: SecretNumberId
    remainingGuesses: Int
    guess: Int
  where
    signatory player, owner

    choice GuessAgain : PlayersTurnId
      with msg : Text
      controller owner
      do create PlayersTurn with
          lastGuess = Some guess
          ..

    choice EndGame : GameOverId
      with msg : Text
      controller owner
      do
        secretNumber <- fetch secretNumberId
        -- archive secretNumberId
        create GameOver with
          secret = secretNumber.secret
          lastGuess = guess
          ..

template GameOver
  with
    owner: Party
    player: Party
    secretNumberId: SecretNumberId
    secret: Int
    lastGuess: Int
    msg: Text
  where
    signatory owner, player

-- https://discuss.daml.com/t/assert-for-divulgence-in-a-script/5728/2?u=wallacekelly
template SecretNumberProbe
  with
    owner: Party
    player: Party
  where
    signatory owner
    observer player

    nonconsuming choice Probe : SecretNumber
      with cid: ContractId SecretNumber
      controller player
      do fetch cid

game = script do
  owner <- allocatePartyWithHint "owner" (PartyIdHint "owner")    
  player <- allocatePartyWithHint "player" (PartyIdHint "player")
  secret <- submit owner $ createCmd SecretNumber with owner, player, secret = 42
  probe <- submit owner $ createCmd SecretNumberProbe with owner, player

  playersTurn1 <- submit owner $ exerciseCmd secret StartGame with allowedGuesses = 3
  playersGuess1 <- submit player $ exerciseCmd playersTurn1 Guess with guess = 20
  Left playersTurn2 <- submit owner $ exerciseCmd secret GiveHint with playersGuessId = playersGuess1
  playersGuess2 <- submit player $ exerciseCmd playersTurn2 Guess with guess = 60
  Left playersTurn3 <- submit owner $ exerciseCmd secret GiveHint with playersGuessId = playersGuess2
  playersGuess3 <- submit player $ exerciseCmd playersTurn3 Guess with guess = 40

  -- secret is not divulged until the game over is created
  _ <- submitMustFail player $ exerciseCmd probe Probe with cid = secret
  Right gameOver <- submit owner $ exerciseCmd secret GiveHint with playersGuessId = playersGuess3
  _ <- submit         player $ exerciseCmd probe Probe with cid = secret
  -- warning: use of divulged contracts is deprecated

  return ()